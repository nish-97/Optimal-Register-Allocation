//
// Generated by JTB 1.3.2
//

package visitor;
// package modules;

import syntaxtree.*;

// import javafx.util.Pair;
// import modules.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MyVisitor implements GJNoArguVisitor<Integer> {
   HashMap<Node, Set<String>> resultMap;
   int programPoint = 1;

   public MyVisitor(HashMap<Node, Set<String>> r) {
      resultMap = r;
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Integer visit(NodeList n) {
      Integer _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Integer visit(NodeListOptional n) {
      if ( n.present() ) {
         Integer _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Integer visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public Integer visit(NodeSequence n) {
      Integer _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public Integer visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( <REGLIMIT> )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public static Map<String, Map<String, String>> method_vars_type_map = new HashMap<>();
   public static ArrayList<LiveRange> interval = new ArrayList<>();
   public static Map<String, String> vars_type_map;
   public static Map<String, LSRA> method_lsra = new HashMap();
   static int registerLimit;
   public Integer visit(Goal n) {
      Integer _ret=null;
      // if (n.f0.present()) 
      String registers = n.f0.toString();
      registerLimit = Integer.parseInt(registers.replaceAll("[^0-9]+", ""));
         // System.out.println("Register Limit: " + registerLimit);
      // }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      /*System.out.println(method_vars_type_map);
      for(int i = 0; i<interval.size(); i++){
         System.out.print(interval.get(i).get_var_name());
         System.out.print(interval.get(i).get_start());
         System.out.print(interval.get(i).get_end());
      }*/
      // System.out.println();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public Integer visit(MainClass n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      String var_name, var_type;
      vars_type_map = new HashMap<>();
      for(int i = 0; i<n.f14.size(); i++){//iterate over no. of local variables
         var_name = (String)(((VarDeclaration)n.f14.elementAt(i)).f1.f0.tokenImage);
         int k = (int)(((VarDeclaration)(n.f14.elementAt(i))).f0.f0.which);
         switch(k){
            case 1:
                var_type = ((BooleanType)(((VarDeclaration)n.f14.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            case 2:
                var_type = ((IntegerType)(((VarDeclaration)n.f14.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            case 3:
                var_type = ((FloatType)(((VarDeclaration)n.f14.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            case 4:
                var_type = ((Identifier)(((VarDeclaration)n.f14.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            default: 
                var_type = null;
         }
         vars_type_map.put(var_name, var_type); //{class_local_variables, type}
      }
      method_vars_type_map.put("main", vars_type_map);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      doLSRA("main");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public Integer visit(TypeDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public Integer visit(ClassDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public Integer visit(ClassExtendsDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Integer visit(VarDeclaration n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] VarDeclaration : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      int flag = 0;
      // System.out.println(interval.size());
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp) , programPoint -1, programPoint -1));
      }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Integer visit(MethodDeclaration n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String method_name = n.f2.f0.tokenImage;
      n.f3.accept(this);
      n.f4.accept(this);
      String var_name, var_type;
      vars_type_map = new HashMap<>();
      for(int i = 0; i<n.f7.size(); i++){//iterate over no. of local variables
         var_name = (String)(((VarDeclaration)n.f7.elementAt(i)).f1.f0.tokenImage);
         int k = (int)(((VarDeclaration)(n.f7.elementAt(i))).f0.f0.which);
         switch(k){
            case 1:
                var_type = ((BooleanType)(((VarDeclaration)n.f7.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            case 2:
                var_type = ((IntegerType)(((VarDeclaration)n.f7.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            case 3:
                var_type = ((FloatType)(((VarDeclaration)n.f7.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            case 4:
                var_type = ((Identifier)(((VarDeclaration)n.f7.elementAt(i)).f0.f0.choice)).f0.tokenImage;
                break;
            default: 
                var_type = null;
         }
        //  if(k >= 3 && k <= 1)
        //     var_type = ((FloatType)(((VarDeclaration)n.f7.elementAt(i)).f0.f0.choice)).f0.tokenImage;
        //  else if(k == 4)
            // var_type = ((Identifier)(((VarDeclaration)n.f7.elementAt(i)).f0.f0.choice)).f0.tokenImage;
         vars_type_map.put(var_name, var_type); //{class_local_variables, type}
      }
      method_vars_type_map.put(method_name, vars_type_map);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] Method Return : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      int flag = 0;
      // System.out.println(interval.size());
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp), programPoint -1, programPoint -1));
      }
      // LiveRange lv = new LiveRange();
      interval.sort(LiveRange::getSortedList);
      /*for(int i = 0; i<interval.size(); i++){
         System.out.print(interval.get(i).get_var_name());
         System.out.print(interval.get(i).get_start());
         System.out.print(interval.get(i).get_end());
      }*/
      // System.out.println();
      doLSRA(method_name);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public Integer visit(FormalParameterList n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public Integer visit(FormalParameter n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public Integer visit(FormalParameterRest n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | FloatType()
    *       | Identifier()
    */
   public Integer visit(Type n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public Integer visit(ArrayType n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "float"
    */
   public Integer visit(FloatType n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public Integer visit(BooleanType n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public Integer visit(IntegerType n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    *       | LivenessQueryStatement()
    */
   public Integer visit(Statement n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public Integer visit(Block n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Integer visit(AssignmentStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] AssignmentStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      int flag = 0;
      // System.out.println(interval.size());
      // for(int i = 0; i<interval.size(); i++){
      //    System.out.print(interval.get(i).get_var_name());
      //    System.out.print(interval.get(i).get_start());
      //    System.out.print(interval.get(i).get_end());
      // }
      // System.out.println();
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp), programPoint-1, programPoint-1));
      }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public Integer visit(ArrayAssignmentStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] ArrayAssignmentStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public Integer visit(FieldAssignmentStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] FieldAssignmentStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public Integer visit(IfStatement n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Integer visit(IfthenStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] IfthenStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      int flag = 0;
      // System.out.println(interval.size());
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp), programPoint -1, programPoint -1));
      }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public Integer visit(IfthenElseStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] IfthenElseStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      int flag = 0;
      // System.out.println(interval.size());
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp), programPoint -1, programPoint -1));
      }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Integer visit(WhileStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] WhileStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      // System.out.println(interval.size());
      // System.out.println();
      int flag = 0;
      // System.out.println(interval.size());
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp), programPoint -1, programPoint -1));
      }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public Integer visit(PrintStatement n) {
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] PrintStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      this.programPoint++;
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);
      int flag = 0;
      // System.out.println(interval.size());
      for(int i = 0; i < interval.size(); i++){
         // LiveRange int = new Interval();
         if(live_vars.contains(interval.get(i).get_var_name())){
            interval.get(i).update_end(programPoint - 1);
            live_vars.remove(interval.get(i).get_var_name());
            flag = 1;
         }
         // else{
         // }
      }
      // LiveRange o = new LiveRange();
      if(/*flag == 0 &&*/ live_vars.size() != 0){
         Iterator itr = live_vars.iterator();
         String temp = null;
         if (itr.hasNext()) 
            temp = (String)itr.next();
         interval.add(new LiveRange(temp, vars_type_map.get(temp), programPoint -1, programPoint -1));
      }
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LIVENESSQUERY>
    * f2 -> <SCOMMENT2>
    */
   public Integer visit(LivenessQueryStatement n) {
      Integer _ret=null;
    //   if (resultMap.containsKey(n)) {
    //      System.out.println("["+(this.programPoint++) + "] LivenessQueryStatement : " + resultMap.get(n));
    //   } else {
    //      System.err.println("LivenessQueryStatement missing: " + n);
    //   }
      Set<String> live_vars = resultMap.get(n);
      // System.out.println(live_vars);

      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public Integer visit(Expression n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public Integer visit(AndExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public Integer visit(OrExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public Integer visit(CompareExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public Integer visit(neqExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public Integer visit(PlusExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public Integer visit(MinusExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public Integer visit(TimesExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public Integer visit(DivExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public Integer visit(ArrayLookup n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public Integer visit(ArrayLength n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public Integer visit(MessageSend n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public Integer visit(ArgList n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public Integer visit(ArgRest n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | FloatLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public Integer visit(PrimaryExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Integer visit(IntegerLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public Integer visit(FloatLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public Integer visit(TrueLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public Integer visit(FalseLiteral n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Integer visit(Identifier n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public Integer visit(ThisExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public Integer visit(ArrayAllocationExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public Integer visit(AllocationExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public Integer visit(NotExpression n) {
      Integer _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }
   
   public void doLSRA(String method_name){
      // System.out.println(registerLimit);
      LSRA ls = new LSRA(interval, registerLimit);
      ls.run();
      method_lsra.put(method_name, ls);
      interval = new ArrayList<>();
   }

}

class LiveRange{
    int start, end;
    String var_name, type;
    boolean register_allocated = false;
    public LiveRange(String v, String w, int a, int b){
       var_name = v;
       type = w;
       start = a;
       end = b;
    }

    public String get_var_name(){
        return var_name;
    }
    public String get_type_name(){
        return type;
    }
    public int get_start(){
        return start;
    }
    public int get_end(){
        return end;
    }
    public void add_reg_flag(){
        register_allocated = true;
    }
    public void update_end(int x){
        end = x;
    }
    public void update_start_end(int x){
        start = x;
        end = x;
    }
    public int getSortedList(LiveRange temp){
      // // Collections.sort(temp, new Comparator<LiveRange>(){
      // //    public int compare(LiveRange a, LiveRange b){
      // //       if(a.start > b.end)
      // //    }
      // // })

      // }
      return Integer.compare(this.start, temp.start);
    }
    public int getBackSortedList(LiveRange temp){
      if (this.end == temp.end)
         return temp.var_name.compareTo(this.var_name);

     return Integer.compare(this.end, temp.end);
    }
}

class LSRA{
   ArrayList<LiveRange> lr_start_point_sorted;
   ArrayList<LiveRange> activity_set;
   Map<String, String> vars_registers = new HashMap();
   int reg; 
   Map<String, Integer> free_regs = new HashMap();
   Set<String> spill_vars = new HashSet();
   int spill_counter = 0;
   Set<String> unique_regs = new HashSet();
   Map<Integer, Map<String, String>> spill_info = new HashMap();
   public LSRA(ArrayList<LiveRange> temp, int registerLimit){
      lr_start_point_sorted = temp;
      reg = registerLimit;
      // free_regs = reg;
      for(int i = 0; i<reg; i++)
         free_regs.put("R"+i, 0);
      // activity_set = temp;
      // activity_set.sort(LiveRange::getSortedList);
   }
   public void run(){
      activity_set = new ArrayList();
      // for(int j=0; j<lr_start_point_sorted.size(); j++){
      //    System.out.println(lr_start_point_sorted.get(j).get_var_name());
      //    System.out.println(lr_start_point_sorted.get(j).get_start());
      //    System.out.println(lr_start_point_sorted.get(j).get_end());
      // }
      // System.out.println(reg);
      for(int i=0; i<lr_start_point_sorted.size(); i++){
         expire_old_intervals(lr_start_point_sorted.get(i));
         if(activity_set.size() == reg){
            spill_at_interval(lr_start_point_sorted.get(i));
         }
         else{
            allocate_register(lr_start_point_sorted.get(i));
            // activity_set.add(lr_start_point_sorted.get(i));
            // activity_set.sort(LiveRange::getBackSortedList);
         }
      }
      // System.out.println(free_regs);
      // System.out.println(spill_info);
      // System.out.println(vars_registers);
   }
   public void allocate_register(LiveRange o)
   {
      String free_register = fetchEmptyRegister(free_regs);
      vars_registers.put(o.get_var_name(), free_register);
      free_regs.put(free_register, 1);
      // unique_regs.add("R"+(free_regs-1));
      // free_regs--;
      o.add_reg_flag();
      activity_set.add(o);
      activity_set.sort(LiveRange::getBackSortedList);
   }
   public void spill_at_interval(LiveRange o){
      if(activity_set.size() == 0)
         return;
      else{
         LiveRange spill = activity_set.get(activity_set.size()-1);
         HashMap<String, String> temp_map = new HashMap<>();
         if(spill.get_end() > o.get_end()){
            vars_registers.put(o.get_var_name(), vars_registers.get(spill.get_var_name()));
            vars_registers.remove(spill.get_var_name());
            temp_map.put(spill.get_var_name(), spill.get_type_name());
            spill_vars.add(spill.get_var_name());
            spill_info.put(spill_counter++, temp_map);
            activity_set.remove(spill);
            activity_set.add(o);
            activity_set.sort(LiveRange::getBackSortedList);
         }
         else{
            // System.out.println(o.get_var_name());
            temp_map.put(o.get_var_name(), o.get_type_name());
            spill_vars.add(o.get_var_name());
            spill_info.put(spill_counter++, temp_map);
         }
      }
   }  
   public void expire_old_intervals(LiveRange o){
      for(int i=0; i<activity_set.size(); i++){
         if(activity_set.get(i).get_end() >= o.get_start()){
            return;
         }
         String occ_regs = vars_registers.get(activity_set.get(i).get_var_name());
         // System.out.println(free_regs);
         // for(int j=0; j<activity_set.size(); j++){
         //    System.out.println(activity_set.get(j).get_var_name());
         //    System.out.println(activity_set.get(j).get_start());
         //    System.out.println(activity_set.get(j).get_end());
         // }
         freeOccupiedRegister(free_regs, occ_regs);
         // System.out.println(free_regs);
         activity_set.remove(i);
         activity_set.sort(LiveRange::getBackSortedList);
         // free_regs++;
      }

   }
   public String fetchEmptyRegister(Map<String, Integer> o){
      for(Map.Entry<String, Integer> mp : o.entrySet())
      {
         if(mp.getValue() == 0){
            // mp.get()
            return mp.getKey();
         }
      }
      return null;
   }
   public void freeOccupiedRegister(Map<String, Integer> o, String temp){
      for(Map.Entry<String, Integer> mp : o.entrySet())
      {
         if(mp.getKey() == temp){
            break;
            // mp.get()
            // return mp.getKey();
         }
      }
      o.put(temp, 0);
   }
   public int findRegisterCount(LSRA o){
      int count = 0;
      for(Map.Entry<String, Integer> mp : o.free_regs.entrySet())
      {
         if(mp.getValue() == 1){
            count++;
         }
      }
      return count;
   }


}